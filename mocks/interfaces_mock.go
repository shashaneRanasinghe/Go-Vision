// Code generated by MockGen. DO NOT EDIT.
// Source: ../src/github.com/shashaneRanasinghe/Go-Vision/interfaces/interfaces.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
        reflect "reflect"

        rekognition "github.com/aws/aws-sdk-go/service/rekognition"
        gomock "github.com/golang/mock/gomock"
        entities "github.com/shashaneRanasinghe/Go-Vision/entities"
        responses "github.com/shashaneRanasinghe/Go-Vision/responses"
)

// MockAWSService is a mock of AWSService interface.
type MockAWSService struct {
        ctrl     *gomock.Controller
        recorder *MockAWSServiceMockRecorder
}

// MockAWSServiceMockRecorder is the mock recorder for MockAWSService.
type MockAWSServiceMockRecorder struct {
        mock *MockAWSService
}

// NewMockAWSService creates a new mock instance.
func NewMockAWSService(ctrl *gomock.Controller) *MockAWSService {
        mock := &MockAWSService{ctrl: ctrl}
        mock.recorder = &MockAWSServiceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSService) EXPECT() *MockAWSServiceMockRecorder {
        return m.recorder
}

// DetectLabels mocks base method.
func (m *MockAWSService) DetectLabels(dlInput entities.DetectLabelInput) (*rekognition.DetectLabelsOutput, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DetectLabels", dlInput)
        ret0, _ := ret[0].(*rekognition.DetectLabelsOutput)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// DetectLabels indicates an expected call of DetectLabels.
func (mr *MockAWSServiceMockRecorder) DetectLabels(dlInput interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectLabels", reflect.TypeOf((*MockAWSService)(nil).DetectLabels), dlInput)
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
        ctrl     *gomock.Controller
        recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
        mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
        mock := &MockModelService{ctrl: ctrl}
        mock.recorder = &MockModelServiceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
        return m.recorder
}

// ImageLabel mocks base method.
func (m *MockModelService) ImageLabel(image []byte) responses.ClassifyResponse {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ImageLabel", image)
        ret0, _ := ret[0].(responses.ClassifyResponse)
        return ret0
}

// ImageLabel indicates an expected call of ImageLabel.
func (mr *MockModelServiceMockRecorder) ImageLabel(image interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageLabel", reflect.TypeOf((*MockModelService)(nil).ImageLabel), image)
}
